import os
import streamlit as st
import pandas as pd
import sqlite3
from dotenv import load_dotenv
from datetime import datetime
import base64
import plotly.express as px
import plotly.graph_objects as go
import numpy as np


# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
DB_PATH = os.getenv("DB_PATH", "db.db")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –≤—ã–∑–æ–≤–æ–º Streamlit)
st.set_page_config(
    page_title="–°–¢–ù - –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∏—Ç–æ–≥–∏",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"

)# –ò–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª—è—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π (–±–µ–∑ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞)
from updater import (
    update_sales_data,
    update_stock_data,
    update_production_data,
    update_purchases_data
)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞
@st.cache_data
def auto_update():
    update_sales_data()
    update_stock_data()
    update_production_data()
    update_purchases_data()

# –í—ã–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
auto_update()

# –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
DB_PATH = os.getenv("DB_PATH", "db.db").replace("DB_PATH=", "")  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å DB_PATH=
# COVER_IMAGE = os.getenv("COVER_IMAGE", "cover.png")
BACKGROUND_IMAGE = os.getenv("BACKGROUND_IMAGE", "cover.png")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ base64
@st.cache_data
def get_base64_of_bin_file(bin_file):
    with open(bin_file, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()

# CSS —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π –±–µ–ª–æ–π –ø–æ–¥–ª–æ–∂–∫–∏ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ —Ö–µ–¥–µ—Ä–∞
HEADER_STYLE = """
<style>
.transparent-box {
    background-color: rgba(255, 255, 255, 0.8);
    padding: 1.5rem;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    margin-bottom: 1.5rem;
}
header[data-testid="stHeader"] {
    background: transparent;
}
</style>
"""

st.markdown(HEADER_STYLE, unsafe_allow_html=True)

# –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
menu = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
    (
        "üè† –ì–ª–∞–≤–Ω–∞—è",
        "üìã –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂",
        "üì¶ –°–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏", 
        "üìä –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
        "üåç –õ–æ–≥–∏—Å—Ç–∏–∫–∞",
        "–ó–∞–∫—É–ø–∫–∏"
    )
)

# –ì–ª–∞–≤–Ω–∞—è
if menu == "üè† –ì–ª–∞–≤–Ω–∞—è":
    # –£–¥–∞–ª—è—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è cover.png
    with st.container():
        st.markdown("""
        <div class="transparent-box">
            <h1>–°–¢–ù: –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∏—Ç–æ–≥–∏</h1>
        </div>
        """, unsafe_allow_html=True)
    # # –î–æ–±–∞–≤–∏–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    # st.markdown("<div class='transparent-box'>", unsafe_allow_html=True)
    # col1, col2, col3 = st.columns(3)
    # col1.metric("–í—ã—Ä—É—á–∫–∞, –º–ª–Ω —Ä—É–±.", "1 250", "+5%")
    # col2.metric("–í—ã–ø—É—Å–∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —Ç.", "3 200", "+2%")
    # col3.metric("–î–æ—Å—Ç–∞–≤–∫–∞", "120", "0%")
    st.markdown("""
    <div style='display: flex; gap: 1rem;'>
        <div style='flex:1; background: #f0f2f6; border-radius: 10px; padding: 1rem; box-shadow: 0 2px 6px rgba(0,0,0,0.05);'>
            <h4>–î–ê–ù–ù–´–ô –†–ê–ó–î–ï–õ –ù–ê–•–û–î–ò–¢–°–Ø –í –†–ê–ó–†–ê–ë–û–¢–ö–ï</h4>
    
    """, unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

elif menu == "üìã –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂":
    st.markdown("""
        <h1 style='text-align:center; color:#2E4053; margin-bottom:0.5em;'>üìä –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂</h1>
        <hr style='border:1px solid #eee; margin-bottom:2em;'>
    """, unsafe_allow_html=True)

    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql_query("""
        SELECT year AS –ì–æ–¥, month AS –ú–µ—Å—è—Ü, type AS –¢–∏–ø, SUM(revenue) AS –í—ã—Ä—É—á–∫–∞
        FROM sales
        WHERE type IN ('–§–∞–∫—Ç', 'Bdg')
        GROUP BY year, month, type
    """, conn)
    conn.close()

    MONTH_NAMES_RU = {
        1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
        5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
        9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
    }

    if df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    else:
        # –ó–∞–º–µ–Ω—è–µ–º —Ç–∏–ø—ã –Ω–∞ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        df['–¢–∏–ø'] = df['–¢–∏–ø'].replace({
            'Bdg': '–ü–ª–∞–Ω'
        })
        years = sorted(df['–ì–æ–¥'].unique(), reverse=True)
        selected_year = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥", years)
        df_year = df[df['–ì–æ–¥'] == selected_year].copy()
        df_year['–ú–µ—Å—è—Ü_–Ω–∞–∑–≤'] = df_year['–ú–µ—Å—è—Ü'].map(MONTH_NAMES_RU)
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –º–µ—Å—è—Ü–∞
        df_year = df_year.sort_values(by=['–ú–µ—Å—è—Ü'])

        # –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ:
        df_year['–ú–µ—Å—è—Ü_–Ω–∞–∑–≤'] = pd.Categorical(
            df_year['–ú–µ—Å—è—Ü_–Ω–∞–∑–≤'],
            categories=[MONTH_NAMES_RU[i] for i in range(1, 13)],
            ordered=True
        )

        st.markdown(f"<h3 style='color:#34495E;'>üìä –§–∞–∫—Ç –∏ –ü–ª–∞–Ω –ø–æ –º–µ—Å—è—Ü–∞–º ‚Äî {selected_year}</h3>", unsafe_allow_html=True)
        totals = df_year.groupby('–¢–∏–ø')['–í—ã—Ä—É—á–∫–∞'].sum().reset_index()
        total_text = ', '.join([f"{row['–¢–∏–ø']}: {int(row['–í—ã—Ä—É—á–∫–∞']):,}".replace(',', ' ') for _, row in totals.iterrows()])
        st.info(f"**–°—É–º–º–∞—Ä–Ω–æ –∑–∞ –≥–æ–¥:** {total_text}")

        fig = px.line(
            df_year, 
            x='–ú–µ—Å—è—Ü_–Ω–∞–∑–≤', 
            y='–í—ã—Ä—É—á–∫–∞', 
            color='–¢–∏–ø', 
            markers=True,
            title="",
            labels={'–í—ã—Ä—É—á–∫–∞': '–í—ã—Ä—É—á–∫–∞ (–º–ª–Ω —Ä—É–±.)', '–ú–µ—Å—è—Ü_–Ω–∞–∑–≤': '–ú–µ—Å—è—Ü'}
        )
        fig.update_traces(
            text=df_year['–í—ã—Ä—É—á–∫–∞'].apply(lambda x: f"{int(x/1_000_000)} –º–ª–Ω" if pd.notnull(x) else ""),
            textposition='top center',
            line=dict(width=4),
            marker=dict(size=10, line=dict(width=2, color='DarkSlateGrey'))
        )
        fig.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            legend_title_text='–¢–∏–ø',
            font=dict(size=16, family='Arial'),
            xaxis=dict(tickangle=-45),
            yaxis=dict(title='–í—ã—Ä—É—á–∫–∞ (–º–ª–Ω —Ä—É–±.)', gridcolor='rgba(200,200,200,0.2)'),
            margin=dict(l=20, r=20, t=60, b=40),
            hovermode='x unified',
        )
        st.plotly_chart(fig, use_container_width=True)

        # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –≤—ã–±–æ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ —Ç–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
        conn = sqlite3.connect(DB_PATH)
        df_managers = pd.read_sql_query('SELECT DISTINCT manager FROM sales WHERE manager IS NOT NULL AND manager != ""', conn)
        conn.close()
        managers = sorted(df_managers['manager'].unique())
        selected_manager = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:', managers)
        if selected_manager:
            # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂ (–ø–ª–∞–Ω –∏ —Ñ–∞–∫—Ç) –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –≥–æ–¥—É
            conn = sqlite3.connect(DB_PATH)
            df_total = pd.read_sql_query('''
                SELECT 
                    SUM(CASE WHEN type = "Bdg" THEN revenue ELSE 0 END) as –ü–ª–∞–Ω,
                    SUM(CASE WHEN type = "–§–∞–∫—Ç" THEN revenue ELSE 0 END) as –§–∞–∫—Ç
                FROM sales
                WHERE manager = ? AND year = ?
            ''', conn, params=(selected_manager, str(selected_year)))
            conn.close()
            total_plan = int(df_total.iloc[0]['–ü–ª–∞–Ω']) if not pd.isna(df_total.iloc[0]['–ü–ª–∞–Ω']) else 0
            total_fact = int(df_total.iloc[0]['–§–∞–∫—Ç']) if not pd.isna(df_total.iloc[0]['–§–∞–∫—Ç']) else 0
            st.markdown(f"""
                <div style='background:#f8f9fa; border-radius:10px; padding:1em 1em; margin-bottom:1em; box-shadow:0 2px 8px rgba(44,62,80,0.07);'>
                    <span style='font-size:1.1em; color:#566573;'>–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ <b>{selected_manager}</b> –∑–∞ {selected_year} –≥–æ–¥:</span><br>
                    <span style='font-size:1.2em; color:#117A65;'>–§–∞–∫—Ç: <b>{total_fact:,} —Ä—É–±.</b></span><br>
                    <span style='font-size:1.2em; color:#2874A6;'>–ü–ª–∞–Ω: <b>{total_plan:,} —Ä—É–±.</b></span>
                </div>
            """, unsafe_allow_html=True)
            conn = sqlite3.connect(DB_PATH)
            df_clients = pd.read_sql_query(f'''
                SELECT client_code,
                       SUM(CASE WHEN type = '–§–∞–∫—Ç' THEN revenue ELSE 0 END) as –§–∞–∫—Ç
                FROM sales
                WHERE manager = ? AND year = ?
                GROUP BY client_code
                HAVING –§–∞–∫—Ç > 0
                ORDER BY –§–∞–∫—Ç DESC
            ''', conn, params=(selected_manager, str(selected_year)))
            conn.close()
            if not df_clients.empty:
                conn = sqlite3.connect(DB_PATH)
                df_names = pd.read_sql_query('SELECT code, name FROM clients', conn)
                conn.close()
                df_clients_merged = df_clients.merge(df_names, left_on='client_code', right_on='code', how='left')
                if not df_clients_merged['name'].isnull().all():
                    df_clients_merged = df_clients_merged[['client_code', 'name', '–§–∞–∫—Ç']]
                    df_clients_merged = df_clients_merged.rename(columns={'name': '–ö–ª–∏–µ–Ω—Ç'})
                    st.markdown(f"<b>–ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(df_clients_merged)}</b>", unsafe_allow_html=True)
                    if df_clients_merged.empty:
                        st.info("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –≥–æ–¥—É.")
                    else:
                        for idx, row in df_clients_merged.iterrows():
                            expander_label = f"{row['–ö–ª–∏–µ–Ω—Ç']} ‚Äî {int(row['–§–∞–∫—Ç']):,} —Ä—É–±."
                            with st.expander(label=expander_label, expanded=False):
                                conn = sqlite3.connect(DB_PATH)
                                df_products = pd.read_sql_query(
                                    '''
                                    SELECT p.code_ap, SUM(s.revenue) as –°—É–º–º–∞_–ø—Ä–æ–¥–∞–∂
                                    FROM sales s
                                    LEFT JOIN products p ON s.product_code = p.code
                                    WHERE s.client_code = ? AND s.manager = ? AND s.year = ?
                                    GROUP BY p.code_ap
                                    ORDER BY –°—É–º–º–∞_–ø—Ä–æ–¥–∞–∂ DESC
                                    ''',
                                    conn, params=(row['client_code'], selected_manager, str(selected_year))
                                )
                                conn.close()
                                if not df_products.empty:
                                    st.dataframe(df_products.rename(
                                        columns={'code_ap': '–ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏', '–°—É–º–º–∞_–ø—Ä–æ–¥–∞–∂': '–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂'}
                                    ), use_container_width=True)
                                else:
                                    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")
                else:
                    st.info('–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –ø–æ –¥–∞–Ω–Ω—ã–º sales:')
                    df_clients_simple = df_clients[['client_code', '–§–∞–∫—Ç']].copy()
                    df_clients_simple = df_clients_simple.rename(columns={'client_code': '–ö–ª–∏–µ–Ω—Ç'})
                    st.markdown(f"<b>–ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(df_clients_simple)}</b>", unsafe_allow_html=True)
                    if df_clients_simple.empty:
                        st.info("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –≥–æ–¥—É.")
                    else:
                        for idx, row in df_clients_simple.iterrows():
                            expander_label = f"{row['–ö–ª–∏–µ–Ω—Ç']} ‚Äî {int(row['–§–∞–∫—Ç']):,} —Ä—É–±."
                            with st.expander(label=expander_label, expanded=False):
                                conn = sqlite3.connect(DB_PATH)
                                df_products = pd.read_sql_query(
                                    '''
                                    SELECT p.code_ap, SUM(s.revenue) as –°—É–º–º–∞_–ø—Ä–æ–¥–∞–∂
                                    FROM sales s
                                    LEFT JOIN products p ON s.product_code = p.code
                                    WHERE s.client_code = ? AND s.manager = ? AND s.year = ?
                                    GROUP BY p.code_ap
                                    ORDER BY –°—É–º–º–∞_–ø—Ä–æ–¥–∞–∂ DESC
                                    ''',
                                    conn, params=(row['–ö–ª–∏–µ–Ω—Ç'], selected_manager, str(selected_year))
                                )
                                conn.close()
                                if not df_products.empty:
                                    st.dataframe(df_products.rename(
                                        columns={'code_ap': '–ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏', '–°—É–º–º–∞_–ø—Ä–æ–¥–∞–∂': '–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂'}
                                    ), use_container_width=True)
                                else:
                                    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")
            else:
                st.info('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.')

        # if set(['–§–∞–∫—Ç', '–ü–ª–∞–Ω']).issubset(df_year['–¢–∏–ø'].unique()):
        #     pivot = df_year.pivot(index='–ú–µ—Å—è—Ü_–Ω–∞–∑–≤', columns='–¢–∏–ø', values='–í—ã—Ä—É—á–∫–∞').fillna(0)
        #     pivot['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ'] = pivot['–§–∞–∫—Ç'] - pivot['–ü–ª–∞–Ω']
        #     pivot['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, %'] = ((pivot['–§–∞–∫—Ç'] - pivot['–ü–ª–∞–Ω']) / pivot['–ü–ª–∞–Ω'] * 100).round(1)
        #     st.markdown("<h4 style='color:#566573;'>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø–ª–∞–Ω–∞ –ø–æ –º–µ—Å—è—Ü–∞–º</h4>", unsafe_allow_html=True)

        #     def highlight(val):
        #         if isinstance(val, (int, float)):
        #             if val > 0:
        #                 color = 'background-color: #d4edda; color: #155724;'  # –∑–µ–ª—ë–Ω—ã–π
        #             elif val < 0:
        #                 color = 'background-color: #f8d7da; color: #721c24;'  # –∫—Ä–∞—Å–Ω—ã–π
        #             else:
        #                 color = ''
        #             return color
        #         return ''

        #     styled = pivot[['–§–∞–∫—Ç', '–ü–ª–∞–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, %']].style.applymap(
        #         highlight, subset=['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, %']
        #     )
        #     st.dataframe(styled, use_container_width=True)

# –°–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
elif menu == "üì¶ –°–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏":
    st.markdown("""
        <h1 style='text-align:center; color:#2E4053; margin-bottom:0.5em;'>üì¶ –°–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏</h1>
        <hr style='border:1px solid #eee; margin-bottom:2em;'>
    """, unsafe_allow_html=True)

    conn = sqlite3.connect(DB_PATH)
    try:
        dates_df = pd.read_sql_query("SELECT DISTINCT report_date FROM stock_balance ORDER BY report_date DESC", conn)
        conn.close()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        dates_df['report_date'] = pd.to_datetime(dates_df['report_date'])
        dates_df['label'] = dates_df['report_date'].dt.strftime('%-d %B %Y').str.capitalize()
        date_mapping = dict(zip(dates_df['label'], dates_df['report_date']))

        # –°–ø–∏—Å–æ–∫ –¥–∞—Ç –¥–ª—è selectbox
        selected_label = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞:", list(date_mapping.keys()))
        selected_date = date_mapping[selected_label]

        st.info(f"üìÖ –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–∞—Ç—É: {selected_label}")

        # –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
        conn = sqlite3.connect(DB_PATH)
        df_all = pd.read_sql_query(
            """
            SELECT warehouse as –°–∫–ª–∞–¥, nomenclature_type as –ì—Ä—É–ø–ø–∞,
                   article as –ê—Ä—Ç–∏–∫—É–ª, quantity as –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, value as –°—É–º–º–∞
            FROM stock_balance
            WHERE report_date = ?
            """,
            conn, params=(selected_date.strftime('%Y-%m-%d'),)
        )
    finally:
        conn.close()

    total_qty_all = df_all['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
    total_val_all = df_all['–°—É–º–º–∞'].sum()
    st.markdown(f"""
        <div style="
            background-color: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
            margin-bottom: 1rem;
        ">
            <strong>–ò–¢–û–ì–û –ø–æ –≤—Å–µ–º —Å–∫–ª–∞–¥–∞–º:</strong>
            {total_qty_all:,.0f} —à—Ç., {total_val_all:,.0f} —Ä—É–±.
        </div>
    """, unsafe_allow_html=True)

    st.markdown("<h3 style='color:#34495E;'>–ò—Ç–æ–≥–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º</h3>", unsafe_allow_html=True)
    summary = (
        df_all
        .groupby('–°–∫–ª–∞–¥')
        .agg({'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':'sum','–°—É–º–º–∞':'sum'})
        .reset_index()
    )
    summary['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = summary['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].map(lambda x: f"{x:,.0f}")
    summary['–°—É–º–º–∞'] = summary['–°—É–º–º–∞'].map(lambda x: f"{x:,.0f}")
    st.dataframe(summary, use_container_width=True, hide_index=True)

    warehouses = ['–í—Å–µ —Å–∫–ª–∞–¥—ã'] + df_all['–°–∫–ª–∞–¥'].unique().tolist()
    selected_wh = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:", warehouses)

    df = df_all if selected_wh == '–í—Å–µ —Å–∫–ª–∞–¥—ã' else df_all[df_all['–°–∫–ª–∞–¥'] == selected_wh]
    st.markdown("<h3 style='color:#34495E;'>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–∫–ª–∞–¥—É –∏ –≥—Ä—É–ø–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤</h3>", unsafe_allow_html=True)

    for wh, df_wh in df.groupby('–°–∫–ª–∞–¥'):
        wh_qty = df_wh['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
        wh_val = df_wh['–°—É–º–º–∞'].sum()
        with st.expander(f"üì¶ –°–∫–ª–∞–¥: {wh} ‚Äî {wh_qty:,.0f} —à—Ç., {wh_val:,.0f} —Ä—É–±.", expanded=False):
            groups = df_wh['–ì—Ä—É–ø–ø–∞'].unique().tolist()
            selected_grp = st.selectbox(f"–ì—Ä—É–ø–ø–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ ¬´{wh}¬ª", groups, key=wh)
            df_grp = df_wh[df_wh['–ì—Ä—É–ø–ø–∞'] == selected_grp]

            grp_qty = df_grp['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
            grp_val = df_grp['–°—É–º–º–∞'].sum()
            st.write(f"**–ì—Ä—É–ø–ø–∞:** {selected_grp} ‚Äî {grp_qty:,.0f} —à—Ç., {grp_val:,.0f} —Ä—É–±.")

            st.table(
                df_grp[['–ê—Ä—Ç–∏–∫—É–ª','–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ','–°—É–º–º–∞']]
                  .sort_values('–ê—Ä—Ç–∏–∫—É–ª')
                  .reset_index(drop=True)
                  .assign(
                      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=lambda d: d['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].map(lambda x: f"{x:,.0f}"),
                      –°—É–º–º–∞=lambda d: d['–°—É–º–º–∞'].map(lambda x: f"{x:,.0f}")
                  )
            )



elif menu == "üìä –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ":
    from updater.production_updater import update_production_data

    st.markdown("""
        <h1 style='text-align:center; color:#2E4053; margin-bottom:0.5em;'>üìä –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</h1>
        <hr style='border:1px solid #eee; margin-bottom:2em;'>
    """, unsafe_allow_html=True)

    if update_production_data():
        st.success("–î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        st.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = sqlite3.connect(DB_PATH)
    df_prod = pd.read_sql_query("""
        SELECT article AS –ê—Ä—Ç–∏–∫—É–ª,
               nomenclature_desc AS –û–ø–∏—Å–∞–Ω–∏–µ,
               plan AS –ü–ª–∞–Ω,
               fact AS –§–∞–∫—Ç
        FROM production_exec
        WHERE LOWER(article) != '–∏—Ç–æ–≥–æ'
    """, conn)
    conn.close()

    if df_prod.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.")
    else:
        import numpy as np
        df_prod['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ'] = df_prod['–§–∞–∫—Ç'] - df_prod['–ü–ª–∞–Ω']
        df_prod['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, %'] = (df_prod['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ'] / df_prod['–ü–ª–∞–Ω'].replace({0: np.nan}) * 100).round(1)

        total_plan = int(df_prod['–ü–ª–∞–Ω'].sum())
        total_fact = int(df_prod['–§–∞–∫—Ç'].sum())
        deviation = total_fact - total_plan
        deviation_pct = (deviation / total_plan * 100) if total_plan else 0

        col1, col2, col3 = st.columns(3)
        col1.metric("–ò—Ç–æ–≥–æ –ü–ª–∞–Ω", f"{total_plan:,}")
        col2.metric("–ò—Ç–æ–≥–æ –§–∞–∫—Ç", f"{total_fact:,}")
        col3.metric("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{deviation:,}", f"{deviation_pct:.1f}%")

        st.markdown("<h3 style='color:#34495E;'>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É</h3>", unsafe_allow_html=True)

        styled = (
            df_prod[['–ê—Ä—Ç–∏–∫—É–ª', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ü–ª–∞–Ω', '–§–∞–∫—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, %']]
            .sort_values('–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, %', ascending=False)
            .reset_index(drop=True)
            .style.format({
                '–ü–ª–∞–Ω': '{:,.0f}',
                '–§–∞–∫—Ç': '{:,.0f}',
                '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ': '{:,.0f}',
                '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, %': '{:.1f}%'
            })
            .map(lambda v: (
                'background-color: #d4edda; color: #155724;' if v > 0 else
                'background-color: #f8d7da; color: #721c24;' if v < 0 else ''
            ) if isinstance(v, (int, float)) else '', subset=['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, %'])
        )
        st.dataframe(styled, use_container_width=True)




elif menu == "üåç –õ–æ–≥–∏—Å—Ç–∏–∫–∞":
    st.markdown("<div class='transparent-box'>", unsafe_allow_html=True)
    st.header("–õ–æ–≥–∏—Å—Ç–∏–∫–∞")
    st.write("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∏–∫–∏.")
    st.markdown("</div>", unsafe_allow_html=True)


elif menu == "–ó–∞–∫—É–ø–∫–∏":
    st.markdown("<h1 style='text-align:center;'>üì¶ –ó–∞–∫—É–ø–∫–∏</h1>", unsafe_allow_html=True)

    conn = sqlite3.connect(DB_PATH)
    try:
        df = pd.read_sql_query("SELECT * FROM purchases ORDER BY report_date DESC", conn)
        if df.empty:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫—É–ø–∫–∞–º.")
        else:
            # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
            available_dates = sorted(df['report_date'].unique(), reverse=True)
            selected_date = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞:", available_dates)
            df_filtered = df[df['report_date'] == selected_date]
            st.info(
            f"–ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {df_filtered['supplier'].nunique()}. "
            f"–°—É–º–º–∞ –∑–∞–∫—É–ø–æ–∫ —Å –ù–î–°: {df_filtered['total_with_vat'].sum():,.0f} —Ä—É–±."
        )


            # st.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –∑–∞–∫—É–ø–∫–∏ –∑–∞ {selected_date}. –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {df_filtered['supplier'].nunique()}")

            for supplier in df_filtered['supplier'].unique():
                supplier_df = df_filtered[df_filtered['supplier'] == supplier]
                total_sum = supplier_df['total_with_vat'].sum()
                with st.expander(f"{supplier} ‚Äî {total_sum:,.0f} —Ä—É–±.", expanded=False):
                    st.dataframe(
                        supplier_df[["product", "quantity", "price_per_unit", "total", "total_with_vat"]]
                        .rename(columns={
                            "product": "–¢–æ–≤–∞—Ä",
                            "quantity": "–ö–æ–ª-–≤–æ",
                            "price_per_unit": "–¶–µ–Ω–∞",
                            "total": "–°—É–º–º–∞",
                            "total_with_vat": "–°—É–º–º–∞ —Å –ù–î–°"
                        }),
                        use_container_width=True
                    )
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫—É–ø–æ–∫: {e}")
    finally:
        conn.close()